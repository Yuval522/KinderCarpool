import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { 
  Calendar, 
  Users, 
  UserRound, 
  Car, 
  Menu, 
  X, 
  LogOut, 
  Home,
  BarChart
} from "lucide-react";
import { Button } from "@/components/ui/button";

export default function Layout({ children, currentPageName }) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const location = useLocation();
  
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const user = await User.me();
        setCurrentUser(user);
      } catch (error) {
        console.log("User not logged in");
      }
    };
    fetchUser();
  }, []);

  useEffect(() => {
    // Close sidebar when route changes (mobile)
    setIsSidebarOpen(false);
  }, [location]);

  const handleLogout = async () => {
    await User.logout();
    window.location.reload();
  };

  const isActive = (pageName) => {
    return currentPageName === pageName;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
      {/* Mobile Header */}
      <header className="lg:hidden fixed top-0 left-0 right-0 bg-white shadow-sm z-30 px-4 py-3 flex items-center justify-between">
        <div className="flex items-center">
          <Button 
            variant="ghost" 
            size="icon"
            onClick={() => setIsSidebarOpen(!isSidebarOpen)}
          >
            {isSidebarOpen ? <X size={24} /> : <Menu size={24} />}
          </Button>
          <h1 className="ml-3 text-xl font-semibold text-indigo-700">KinderCarpool</h1>
        </div>
        {currentUser && (
          <div className="flex items-center space-x-1">
            <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-700 text-sm font-medium">
              {currentUser.full_name?.charAt(0) || "U"}
            </div>
          </div>
        )}
      </header>

      {/* Sidebar overlay */}
      {isSidebarOpen && (
        <div 
          className="lg:hidden fixed inset-0 bg-black/30 z-30"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <aside 
        className={`
          fixed top-0 left-0 bottom-0 w-64 bg-white shadow-lg z-40 transform transition-transform duration-300 ease-in-out 
          ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
          lg:translate-x-0 lg:z-10
        `}
      >
        <div className="flex flex-col h-full">
          <div className="p-5 border-b">
            <Link to={createPageUrl("Dashboard")} className="flex items-center">
              <Car className="h-6 w-6 text-indigo-600" />
              <h1 className="ml-2 text-xl font-bold text-indigo-700">KinderCarpool</h1>
            </Link>
          </div>

          <nav className="flex-1 p-4 space-y-1">
            <Link
              to={createPageUrl("Dashboard")}
              className={`
                flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors 
                ${isActive('Dashboard') 
                  ? 'bg-indigo-100 text-indigo-700 font-medium' 
                  : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <Home size={20} />
              <span>Dashboard</span>
            </Link>
            
            <Link
              to={createPageUrl("Calendar")}
              className={`
                flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors 
                ${isActive('Calendar') 
                  ? 'bg-indigo-100 text-indigo-700 font-medium' 
                  : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <Calendar size={20} />
              <span>Calendar</span>
            </Link>
            
            <Link
              to={createPageUrl("Parents")}
              className={`
                flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors 
                ${isActive('Parents') 
                  ? 'bg-indigo-100 text-indigo-700 font-medium' 
                  : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <UserRound size={20} />
              <span>Parents</span>
            </Link>
            
            <Link
              to={createPageUrl("Children")}
              className={`
                flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors 
                ${isActive('Children') 
                  ? 'bg-indigo-100 text-indigo-700 font-medium' 
                  : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <Users size={20} />
              <span>Children</span>
            </Link>

            <Link
              to={createPageUrl("Reports")}
              className={`
                flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors 
                ${isActive('Reports') 
                  ? 'bg-indigo-100 text-indigo-700 font-medium' 
                  : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <BarChart size={20} />
              <span>Reports</span>
            </Link>
          </nav>

          {currentUser && (
            <div className="p-4 border-t">
              <div className="flex items-center p-2">
                <div className="w-10 h-10 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-700 font-medium">
                  {currentUser.full_name?.charAt(0) || "U"}
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-800">{currentUser.full_name}</p>
                  <p className="text-xs text-gray-500 truncate">{currentUser.email}</p>
                </div>
              </div>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleLogout}
                className="mt-2 w-full justify-start text-gray-700"
              >
                <LogOut size={16} className="mr-2" />
                Sign Out
              </Button>
            </div>
          )}
        </div>
      </aside>

      {/* Main content */}
      <main className="transition-all duration-300 lg:pl-64 pt-14 lg:pt-0 min-h-screen">
        <div className="p-4 md:p-6 max-w-7xl mx-auto">
          {children}
        </div>
      </main>
    </div>
  );
}
